import numpy as np

# Creates a CSV or a header file from the .npy grid data
# Serialized grid can used for compensation or debugging

def loadGrid(grid_name):
    data = np.load(grid_name)
    total = 0.0
    for value in np.nditer(data): 
        total += value
    print("Data shape: {0}\nsignature: {1}\n".format(data.shape, int(total)))
    return data

# data: 2d numpy array
def createCsv(data):
    np.savetxt("qtable.csv", data, fmt="%-7.4f", delimiter=",")

def createHeader(data):
    with open('qtable.h', 'ab') as f:
        f.truncate(0) # delete old contents
        string = "// This file has been autogenerated \
                  \nreal32 qtable_weights[{0}][{1}] = {{\n" \
                  .format(data.shape[0], data.shape[1])
        f.write(bytes(string, 'utf-8'))
        np.savetxt(f, data, fmt="%-7.4f", delimiter=",", newline=",\n")
        f.write(bytes("};\n", 'utf-8'))


def verify(data):
    for i in range(0, 100):
        print(data[i])

if __name__ == "__main__":
    grid_name = 'qtable.npy'
    data = loadGrid(grid_name)
    ans = input("[1] Header-file \n[2] CSV-file\n")
    if int(ans) == 1:
        createHeader(data)
    else:
        createCsv(data)

    verify(data)

# state: [angle, action]
# \ a c t i o n
# a . . . . . .
# n . . . . . .
# g . . . . . .
# l . . . . . .
# e . . . . . . 
